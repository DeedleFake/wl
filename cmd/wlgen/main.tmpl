// Code generated by wlgen. DO NOT EDIT.

package {{.Package}}

import (
	{{range .ExtraImports -}}
		{{. | printf "%q"}}
	{{end -}}
	"deedles.dev/wl/wire"
)

{{range .Protocol.Interfaces}}
	{{- $name := .Name | trimPrefix $.Prefix | camel | unexport -}}
	{{- $listeners := listeners $.IsClient . -}}
	{{- $senders := senders $.IsClient . -}}

	type {{$name}}Object struct {
		listener interface {
			{{range $listeners}}
				{{- .Name | camel | export}}({{range .Args}}{{.Name | camel | unexport | unkeyword}} {{. | goType}}, {{end}})
			{{end}}
		}
	}

	func (obj {{$name}}Object) Dispatch(msg *wire.MessageBuffer) error {
		switch msg.Op() {
		{{- range $op, $method := $listeners}}
			case {{$op}}:
				{{range $method.Args -}}
					{{.Name | camel | unexport | unkeyword}} := msg.Read{{. | typeFuncSuffix}}()
				{{end -}}
				if err := msg.Err(); err != nil {
					return err
				}
				obj.listener.{{.Name | camel | export}}(
					{{range $method.Args -}}
						{{.Name | camel | unexport | unkeyword}},
					{{end -}}
				)
		{{end -}}
		}

		return wire.UnknownOpError{
			Interface: {{.Name | printf "%q"}},
			Type: {{if $.IsClient -}} "event" {{- else -}} "request" {{- end}},
			Op: msg.Op(),
		}
	}

	{{range $op, $method := $senders}}
		func (obj {{$name}}Object) {{$method.Name | camel | export}}(sender uint32, {{range $method.Args}}{{.Name | camel | unexport | unkeyword}} {{. | goType}}, {{end}}) *wire.MessageBuilder {
			builder := wire.MessageBuilder{
				Sender: sender,
				Op: {{$op}},
			}

			{{range $method.Args -}}
				builder.Write{{. | typeFuncSuffix}}({{.Name | camel | unexport | unkeyword}})
			{{end}}

			return &builder
		}
	{{end}}

	{{range $enum := .Enums}}
		{{- $enumName := printf "%s%s" ($name | export) (.Name | camel | export) | unexport -}}
		type {{$enumName}} int32

		const (
			{{range .Entries -}}
				{{$enumName}}{{.Name | camel | export}} {{$enumName}} = {{.Int}}
			{{end}}
		)
	{{end}}
{{end}}
