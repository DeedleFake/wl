// Code generated by wlgen. DO NOT EDIT.

package {{.Config.Package}}

import (
	{{range .ExtraImports -}}
		{{. | printf "%q"}}
	{{end -}}
	{{range $k, $v := .Config.Imports -}}
		{{with $v.Name}}{{.}}{{end}} {{$k | printf "%q"}}
	{{end -}}
	"fmt"
	"deedles.dev/wl/wire"
)

{{range $interface := .Protocol.Interfaces}}
	{{- $name := .Name | ident | unexport -}}
	{{- $listeners := listeners . -}}
	{{- $senders := senders . -}}

	const (
		{{$name | unexport}}Interface = {{.Name | printf "%q"}}
		{{$name | unexport}}Version = {{.Version}}
	)

	{{.Description.Full | trimSpace | trimLines | comment -}}
	type {{$name}} struct {
		id uint32
		delete func()
		{{if ne (len $listeners) 0 -}}
			listener interface {
				{{range $listeners -}}
					{{.Description.Full | trimSpace | trimLines | comment -}}
					{{.Name | camel | export}}({{range .Args}}{{.Name | camel | unexport | unkeyword}} {{. | goType}}, {{end}})

				{{end}}
			}
		{{end}}
	}

	func (obj {{$name}}) Dispatch(msg *wire.MessageBuffer) error {
		switch msg.Op() {
		{{- range $op, $method := $listeners}}
			case {{$op}}:
				{{range $method.Args -}}
				{{.Name | camel | unexport | unkeyword}} := msg.Read{{. | typeFuncSuffix}}()
				{{end -}}
				if err := msg.Err(); err != nil {
					return err
				}
				obj.listener.{{.Name | camel | export}}(
					{{range $method.Args -}}
						{{.Name | camel | unexport | unkeyword}},
					{{end -}}
				)
				return nil
		{{end -}}
		}

		return wire.UnknownOpError{
			Interface: {{.Name | printf "%q"}},
			Type: {{if $.IsClient -}} "event" {{- else -}} "request" {{- end}},
			Op: msg.Op(),
		}
	}

	func (obj {{$name}}) ID() uint32 {
		return obj.id
	}

	func (obj *{{$name}}) SetID(id uint32) {
		obj.id = id
	}

	func (obj {{$name}}) Delete() {
		if obj.delete != nil {
			obj.delete()
		}
	}

	func (obj {{$name}}) String() string {
		return fmt.Sprintf("%v(%v)", {{$interface.Name | printf "%q"}}, obj.id)
	}

	func (obj {{$name}}) MethodName(op uint16) string {
		switch op {
		{{- range $op, $method := $listeners}}
			case {{$op}}:
				return {{$method.Name | printf "%q"}}
		{{end -}}
		}

		return "unknown method"
	}

	{{range $op, $method := $senders}}
		{{$method.Description.Full | trimSpace | trimLines | comment -}}
		func (obj {{$name}}) {{$method.Name | camel | export}}({{range $method.Args}}{{.Name | camel | unexport | unkeyword}} {{. | goType}}, {{end}}) *wire.MessageBuilder {
			builder := wire.NewMessage(&obj, {{$op}})
			builder.Method = {{$method.Name | printf "%q"}}
			builder.Args = []any{ {{- range $method.Args}}{{.Name | camel | unexport | unkeyword}}, {{end -}} }

			{{range $method.Args -}}
				builder.Write{{. | typeFuncSuffix}}({{.Name | camel | unexport | unkeyword}})
			{{end}}

			return builder
		}
	{{end}}

	{{range $enum := .Enums}}
		{{- $enumName := printf "%s%s" ($name | export) (.Name | camel | export) | export -}}

		{{$enum.Description.Full | trimSpace | trimLines | comment -}}
		type {{$enumName}} int64

		const (
			{{range .Entries -}}
				{{.Summary | trimSpace | trimLines | comment -}}
				{{$enumName}}{{.Name | camel | export}} {{$enumName}} = {{.Int}}

			{{end}}
		)

		func (enum {{$enumName}}) String() string {
			switch enum {
			{{- range .Entries}}
				case {{.Int}}: return {{printf "%s%s" $enumName (.Name | camel | export) | printf "%q"}}
			{{end -}}
			}

			return {{printf "<invalid %s>" $enumName | printf "%q"}}
		}
	{{end}}
{{end}}
