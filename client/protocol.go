// Code generated by wlgen. DO NOT EDIT.

package wl

import (
	"deedles.dev/wl/wire"
	"os"
)

type displayObject struct {
	listener interface {
		Error(objectId uint32, code uint32, message string)
		DeleteId(id uint32)
	}
}

func (obj displayObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		objectId := msg.ReadUint()
		code := msg.ReadUint()
		message := msg.ReadString()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Error(
			objectId,
			code,
			message,
		)

	case 1:
		id := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.DeleteId(
			id,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_display",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj displayObject) Sync(sender uint32, callback uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(callback)

	return &builder
}

func (obj displayObject) GetRegistry(sender uint32, registry uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(registry)

	return &builder
}

type displayError int32

const (
	displayErrorInvalidObject  displayError = 0
	displayErrorInvalidMethod  displayError = 1
	displayErrorNoMemory       displayError = 2
	displayErrorImplementation displayError = 3
)

type registryObject struct {
	listener interface {
		Global(name uint32, _interface string, version uint32)
		GlobalRemove(name uint32)
	}
}

func (obj registryObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		name := msg.ReadUint()
		_interface := msg.ReadString()
		version := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Global(
			name,
			_interface,
			version,
		)

	case 1:
		name := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.GlobalRemove(
			name,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_registry",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj registryObject) Bind(sender uint32, name uint32, id wire.NewID) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(name)
	builder.WriteNewID(id)

	return &builder
}

type callbackObject struct {
	listener interface {
		Done(callbackData uint32)
	}
}

func (obj callbackObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		callbackData := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Done(
			callbackData,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_callback",
		Type:      "event",
		Op:        msg.Op(),
	}
}

type compositorObject struct {
	listener interface {
	}
}

func (obj compositorObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_compositor",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj compositorObject) CreateSurface(sender uint32, id uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(id)

	return &builder
}

func (obj compositorObject) CreateRegion(sender uint32, id uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(id)

	return &builder
}

type shmPoolObject struct {
	listener interface {
	}
}

func (obj shmPoolObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_shm_pool",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj shmPoolObject) CreateBuffer(sender uint32, id uint32, offset int32, width int32, height int32, stride int32, format uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(id)
	builder.WriteInt(offset)
	builder.WriteInt(width)
	builder.WriteInt(height)
	builder.WriteInt(stride)
	builder.WriteUint(format)

	return &builder
}

func (obj shmPoolObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	return &builder
}

func (obj shmPoolObject) Resize(sender uint32, size int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteInt(size)

	return &builder
}

type shmObject struct {
	listener interface {
		Format(format uint32)
	}
}

func (obj shmObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		format := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Format(
			format,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_shm",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj shmObject) CreatePool(sender uint32, id uint32, fd *os.File, size int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(id)
	builder.WriteFile(fd)
	builder.WriteInt(size)

	return &builder
}

type shmError int32

const (
	shmErrorInvalidFormat shmError = 0
	shmErrorInvalidStride shmError = 1
	shmErrorInvalidFd     shmError = 2
)

type shmFormat int32

const (
	shmFormatArgb8888             shmFormat = 0
	shmFormatXrgb8888             shmFormat = 1
	shmFormatC8                   shmFormat = 538982467
	shmFormatRgb332               shmFormat = 943867730
	shmFormatBgr233               shmFormat = 944916290
	shmFormatXrgb4444             shmFormat = 842093144
	shmFormatXbgr4444             shmFormat = 842089048
	shmFormatRgbx4444             shmFormat = 842094674
	shmFormatBgrx4444             shmFormat = 842094658
	shmFormatArgb4444             shmFormat = 842093121
	shmFormatAbgr4444             shmFormat = 842089025
	shmFormatRgba4444             shmFormat = 842088786
	shmFormatBgra4444             shmFormat = 842088770
	shmFormatXrgb1555             shmFormat = 892424792
	shmFormatXbgr1555             shmFormat = 892420696
	shmFormatRgbx5551             shmFormat = 892426322
	shmFormatBgrx5551             shmFormat = 892426306
	shmFormatArgb1555             shmFormat = 892424769
	shmFormatAbgr1555             shmFormat = 892420673
	shmFormatRgba5551             shmFormat = 892420434
	shmFormatBgra5551             shmFormat = 892420418
	shmFormatRgb565               shmFormat = 909199186
	shmFormatBgr565               shmFormat = 909199170
	shmFormatRgb888               shmFormat = 875710290
	shmFormatBgr888               shmFormat = 875710274
	shmFormatXbgr8888             shmFormat = 875709016
	shmFormatRgbx8888             shmFormat = 875714642
	shmFormatBgrx8888             shmFormat = 875714626
	shmFormatAbgr8888             shmFormat = 875708993
	shmFormatRgba8888             shmFormat = 875708754
	shmFormatBgra8888             shmFormat = 875708738
	shmFormatXrgb2101010          shmFormat = 808669784
	shmFormatXbgr2101010          shmFormat = 808665688
	shmFormatRgbx1010102          shmFormat = 808671314
	shmFormatBgrx1010102          shmFormat = 808671298
	shmFormatArgb2101010          shmFormat = 808669761
	shmFormatAbgr2101010          shmFormat = 808665665
	shmFormatRgba1010102          shmFormat = 808665426
	shmFormatBgra1010102          shmFormat = 808665410
	shmFormatYuyv                 shmFormat = 1448695129
	shmFormatYvyu                 shmFormat = 1431918169
	shmFormatUyvy                 shmFormat = 1498831189
	shmFormatVyuy                 shmFormat = 1498765654
	shmFormatAyuv                 shmFormat = 1448433985
	shmFormatNv12                 shmFormat = 842094158
	shmFormatNv21                 shmFormat = 825382478
	shmFormatNv16                 shmFormat = 909203022
	shmFormatNv61                 shmFormat = 825644622
	shmFormatYuv410               shmFormat = 961959257
	shmFormatYvu410               shmFormat = 961893977
	shmFormatYuv411               shmFormat = 825316697
	shmFormatYvu411               shmFormat = 825316953
	shmFormatYuv420               shmFormat = 842093913
	shmFormatYvu420               shmFormat = 842094169
	shmFormatYuv422               shmFormat = 909202777
	shmFormatYvu422               shmFormat = 909203033
	shmFormatYuv444               shmFormat = 875713881
	shmFormatYvu444               shmFormat = 875714137
	shmFormatR8                   shmFormat = 538982482
	shmFormatR16                  shmFormat = 540422482
	shmFormatRg88                 shmFormat = 943212370
	shmFormatGr88                 shmFormat = 943215175
	shmFormatRg1616               shmFormat = 842221394
	shmFormatGr1616               shmFormat = 842224199
	shmFormatXrgb16161616f        shmFormat = 1211388504
	shmFormatXbgr16161616f        shmFormat = 1211384408
	shmFormatArgb16161616f        shmFormat = 1211388481
	shmFormatAbgr16161616f        shmFormat = 1211384385
	shmFormatXyuv8888             shmFormat = 1448434008
	shmFormatVuy888               shmFormat = 875713878
	shmFormatVuy101010            shmFormat = 808670550
	shmFormatY210                 shmFormat = 808530521
	shmFormatY212                 shmFormat = 842084953
	shmFormatY216                 shmFormat = 909193817
	shmFormatY410                 shmFormat = 808531033
	shmFormatY412                 shmFormat = 842085465
	shmFormatY416                 shmFormat = 909194329
	shmFormatXvyu2101010          shmFormat = 808670808
	shmFormatXvyu1216161616       shmFormat = 909334104
	shmFormatXvyu16161616         shmFormat = 942954072
	shmFormatY0l0                 shmFormat = 810299481
	shmFormatX0l0                 shmFormat = 810299480
	shmFormatY0l2                 shmFormat = 843853913
	shmFormatX0l2                 shmFormat = 843853912
	shmFormatYuv4208bit           shmFormat = 942691673
	shmFormatYuv42010bit          shmFormat = 808539481
	shmFormatXrgb8888A8           shmFormat = 943805016
	shmFormatXbgr8888A8           shmFormat = 943800920
	shmFormatRgbx8888A8           shmFormat = 943806546
	shmFormatBgrx8888A8           shmFormat = 943806530
	shmFormatRgb888A8             shmFormat = 943798354
	shmFormatBgr888A8             shmFormat = 943798338
	shmFormatRgb565A8             shmFormat = 943797586
	shmFormatBgr565A8             shmFormat = 943797570
	shmFormatNv24                 shmFormat = 875714126
	shmFormatNv42                 shmFormat = 842290766
	shmFormatP210                 shmFormat = 808530512
	shmFormatP010                 shmFormat = 808530000
	shmFormatP012                 shmFormat = 842084432
	shmFormatP016                 shmFormat = 909193296
	shmFormatAxbxgxrx106106106106 shmFormat = 808534593
	shmFormatNv15                 shmFormat = 892425806
	shmFormatQ410                 shmFormat = 808531025
	shmFormatQ401                 shmFormat = 825242705
)

type bufferObject struct {
	listener interface {
		Release()
	}
}

func (obj bufferObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Release()
	}

	return wire.UnknownOpError{
		Interface: "wl_buffer",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj bufferObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

type dataOfferObject struct {
	listener interface {
		Offer(mimeType string)
		SourceActions(sourceActions uint32)
		Action(dndAction uint32)
	}
}

func (obj dataOfferObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		mimeType := msg.ReadString()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Offer(
			mimeType,
		)

	case 1:
		sourceActions := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.SourceActions(
			sourceActions,
		)

	case 2:
		dndAction := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Action(
			dndAction,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_data_offer",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj dataOfferObject) Accept(sender uint32, serial uint32, mimeType string) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(serial)
	builder.WriteString(mimeType)

	return &builder
}

func (obj dataOfferObject) Receive(sender uint32, mimeType string, fd *os.File) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteString(mimeType)
	builder.WriteFile(fd)

	return &builder
}

func (obj dataOfferObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	return &builder
}

func (obj dataOfferObject) Finish(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     3,
	}

	return &builder
}

func (obj dataOfferObject) SetActions(sender uint32, dndActions uint32, preferredAction uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     4,
	}

	builder.WriteUint(dndActions)
	builder.WriteUint(preferredAction)

	return &builder
}

type dataOfferError int32

const (
	dataOfferErrorInvalidFinish     dataOfferError = 0
	dataOfferErrorInvalidActionMask dataOfferError = 1
	dataOfferErrorInvalidAction     dataOfferError = 2
	dataOfferErrorInvalidOffer      dataOfferError = 3
)

type dataSourceObject struct {
	listener interface {
		Target(mimeType string)
		Send(mimeType string, fd *os.File)
		Cancelled()
		DndDropPerformed()
		DndFinished()
		Action(dndAction uint32)
	}
}

func (obj dataSourceObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		mimeType := msg.ReadString()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Target(
			mimeType,
		)

	case 1:
		mimeType := msg.ReadString()
		fd := msg.ReadFile()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Send(
			mimeType,
			fd,
		)

	case 2:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Cancelled()

	case 3:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.DndDropPerformed()

	case 4:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.DndFinished()

	case 5:
		dndAction := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Action(
			dndAction,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_data_source",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj dataSourceObject) Offer(sender uint32, mimeType string) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteString(mimeType)

	return &builder
}

func (obj dataSourceObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	return &builder
}

func (obj dataSourceObject) SetActions(sender uint32, dndActions uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteUint(dndActions)

	return &builder
}

type dataSourceError int32

const (
	dataSourceErrorInvalidActionMask dataSourceError = 0
	dataSourceErrorInvalidSource     dataSourceError = 1
)

type dataDeviceObject struct {
	listener interface {
		DataOffer(id uint32)
		Enter(serial uint32, surface uint32, x wire.Fixed, y wire.Fixed, id uint32)
		Leave()
		Motion(time uint32, x wire.Fixed, y wire.Fixed)
		Drop()
		Selection(id uint32)
	}
}

func (obj dataDeviceObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		id := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.DataOffer(
			id,
		)

	case 1:
		serial := msg.ReadUint()
		surface := msg.ReadUint()
		x := msg.ReadFixed()
		y := msg.ReadFixed()
		id := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Enter(
			serial,
			surface,
			x,
			y,
			id,
		)

	case 2:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Leave()

	case 3:
		time := msg.ReadUint()
		x := msg.ReadFixed()
		y := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Motion(
			time,
			x,
			y,
		)

	case 4:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Drop()

	case 5:
		id := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Selection(
			id,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_data_device",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj dataDeviceObject) StartDrag(sender uint32, source uint32, origin uint32, icon uint32, serial uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(source)
	builder.WriteUint(origin)
	builder.WriteUint(icon)
	builder.WriteUint(serial)

	return &builder
}

func (obj dataDeviceObject) SetSelection(sender uint32, source uint32, serial uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(source)
	builder.WriteUint(serial)

	return &builder
}

func (obj dataDeviceObject) Release(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	return &builder
}

type dataDeviceError int32

const (
	dataDeviceErrorRole dataDeviceError = 0
)

type dataDeviceManagerObject struct {
	listener interface {
	}
}

func (obj dataDeviceManagerObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_data_device_manager",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj dataDeviceManagerObject) CreateDataSource(sender uint32, id uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(id)

	return &builder
}

func (obj dataDeviceManagerObject) GetDataDevice(sender uint32, id uint32, seat uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(id)
	builder.WriteUint(seat)

	return &builder
}

type dataDeviceManagerDndAction int32

const (
	dataDeviceManagerDndActionNone dataDeviceManagerDndAction = 0
	dataDeviceManagerDndActionCopy dataDeviceManagerDndAction = 1
	dataDeviceManagerDndActionMove dataDeviceManagerDndAction = 2
	dataDeviceManagerDndActionAsk  dataDeviceManagerDndAction = 4
)

type shellObject struct {
	listener interface {
	}
}

func (obj shellObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_shell",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj shellObject) GetShellSurface(sender uint32, id uint32, surface uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(id)
	builder.WriteUint(surface)

	return &builder
}

type shellError int32

const (
	shellErrorRole shellError = 0
)

type shellSurfaceObject struct {
	listener interface {
		Ping(serial uint32)
		Configure(edges uint32, width int32, height int32)
		PopupDone()
	}
}

func (obj shellSurfaceObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		serial := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Ping(
			serial,
		)

	case 1:
		edges := msg.ReadUint()
		width := msg.ReadInt()
		height := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Configure(
			edges,
			width,
			height,
		)

	case 2:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.PopupDone()
	}

	return wire.UnknownOpError{
		Interface: "wl_shell_surface",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj shellSurfaceObject) Pong(sender uint32, serial uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(serial)

	return &builder
}

func (obj shellSurfaceObject) Move(sender uint32, seat uint32, serial uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(seat)
	builder.WriteUint(serial)

	return &builder
}

func (obj shellSurfaceObject) Resize(sender uint32, seat uint32, serial uint32, edges uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteUint(seat)
	builder.WriteUint(serial)
	builder.WriteUint(edges)

	return &builder
}

func (obj shellSurfaceObject) SetToplevel(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     3,
	}

	return &builder
}

func (obj shellSurfaceObject) SetTransient(sender uint32, parent uint32, x int32, y int32, flags uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     4,
	}

	builder.WriteUint(parent)
	builder.WriteInt(x)
	builder.WriteInt(y)
	builder.WriteUint(flags)

	return &builder
}

func (obj shellSurfaceObject) SetFullscreen(sender uint32, method uint32, framerate uint32, output uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     5,
	}

	builder.WriteUint(method)
	builder.WriteUint(framerate)
	builder.WriteUint(output)

	return &builder
}

func (obj shellSurfaceObject) SetPopup(sender uint32, seat uint32, serial uint32, parent uint32, x int32, y int32, flags uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     6,
	}

	builder.WriteUint(seat)
	builder.WriteUint(serial)
	builder.WriteUint(parent)
	builder.WriteInt(x)
	builder.WriteInt(y)
	builder.WriteUint(flags)

	return &builder
}

func (obj shellSurfaceObject) SetMaximized(sender uint32, output uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     7,
	}

	builder.WriteUint(output)

	return &builder
}

func (obj shellSurfaceObject) SetTitle(sender uint32, title string) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     8,
	}

	builder.WriteString(title)

	return &builder
}

func (obj shellSurfaceObject) SetClass(sender uint32, class string) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     9,
	}

	builder.WriteString(class)

	return &builder
}

type shellSurfaceResize int32

const (
	shellSurfaceResizeNone        shellSurfaceResize = 0
	shellSurfaceResizeTop         shellSurfaceResize = 1
	shellSurfaceResizeBottom      shellSurfaceResize = 2
	shellSurfaceResizeLeft        shellSurfaceResize = 4
	shellSurfaceResizeTopLeft     shellSurfaceResize = 5
	shellSurfaceResizeBottomLeft  shellSurfaceResize = 6
	shellSurfaceResizeRight       shellSurfaceResize = 8
	shellSurfaceResizeTopRight    shellSurfaceResize = 9
	shellSurfaceResizeBottomRight shellSurfaceResize = 10
)

type shellSurfaceTransient int32

const (
	shellSurfaceTransientInactive shellSurfaceTransient = 1
)

type shellSurfaceFullscreenMethod int32

const (
	shellSurfaceFullscreenMethodDefault shellSurfaceFullscreenMethod = 0
	shellSurfaceFullscreenMethodScale   shellSurfaceFullscreenMethod = 1
	shellSurfaceFullscreenMethodDriver  shellSurfaceFullscreenMethod = 2
	shellSurfaceFullscreenMethodFill    shellSurfaceFullscreenMethod = 3
)

type surfaceObject struct {
	listener interface {
		Enter(output uint32)
		Leave(output uint32)
	}
}

func (obj surfaceObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		output := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Enter(
			output,
		)

	case 1:
		output := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Leave(
			output,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_surface",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj surfaceObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

func (obj surfaceObject) Attach(sender uint32, buffer uint32, x int32, y int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(buffer)
	builder.WriteInt(x)
	builder.WriteInt(y)

	return &builder
}

func (obj surfaceObject) Damage(sender uint32, x int32, y int32, width int32, height int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteInt(x)
	builder.WriteInt(y)
	builder.WriteInt(width)
	builder.WriteInt(height)

	return &builder
}

func (obj surfaceObject) Frame(sender uint32, callback uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     3,
	}

	builder.WriteUint(callback)

	return &builder
}

func (obj surfaceObject) SetOpaqueRegion(sender uint32, region uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     4,
	}

	builder.WriteUint(region)

	return &builder
}

func (obj surfaceObject) SetInputRegion(sender uint32, region uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     5,
	}

	builder.WriteUint(region)

	return &builder
}

func (obj surfaceObject) Commit(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     6,
	}

	return &builder
}

func (obj surfaceObject) SetBufferTransform(sender uint32, transform int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     7,
	}

	builder.WriteInt(transform)

	return &builder
}

func (obj surfaceObject) SetBufferScale(sender uint32, scale int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     8,
	}

	builder.WriteInt(scale)

	return &builder
}

func (obj surfaceObject) DamageBuffer(sender uint32, x int32, y int32, width int32, height int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     9,
	}

	builder.WriteInt(x)
	builder.WriteInt(y)
	builder.WriteInt(width)
	builder.WriteInt(height)

	return &builder
}

type surfaceError int32

const (
	surfaceErrorInvalidScale     surfaceError = 0
	surfaceErrorInvalidTransform surfaceError = 1
	surfaceErrorInvalidSize      surfaceError = 2
)

type seatObject struct {
	listener interface {
		Capabilities(capabilities uint32)
		Name(name string)
	}
}

func (obj seatObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		capabilities := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Capabilities(
			capabilities,
		)

	case 1:
		name := msg.ReadString()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Name(
			name,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_seat",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj seatObject) GetPointer(sender uint32, id uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(id)

	return &builder
}

func (obj seatObject) GetKeyboard(sender uint32, id uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(id)

	return &builder
}

func (obj seatObject) GetTouch(sender uint32, id uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteUint(id)

	return &builder
}

func (obj seatObject) Release(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     3,
	}

	return &builder
}

type seatCapability int32

const (
	seatCapabilityPointer  seatCapability = 1
	seatCapabilityKeyboard seatCapability = 2
	seatCapabilityTouch    seatCapability = 4
)

type seatError int32

const (
	seatErrorMissingCapability seatError = 0
)

type pointerObject struct {
	listener interface {
		Enter(serial uint32, surface uint32, surfaceX wire.Fixed, surfaceY wire.Fixed)
		Leave(serial uint32, surface uint32)
		Motion(time uint32, surfaceX wire.Fixed, surfaceY wire.Fixed)
		Button(serial uint32, time uint32, button uint32, state uint32)
		Axis(time uint32, axis uint32, value wire.Fixed)
		Frame()
		AxisSource(axisSource uint32)
		AxisStop(time uint32, axis uint32)
		AxisDiscrete(axis uint32, discrete int32)
	}
}

func (obj pointerObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		serial := msg.ReadUint()
		surface := msg.ReadUint()
		surfaceX := msg.ReadFixed()
		surfaceY := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Enter(
			serial,
			surface,
			surfaceX,
			surfaceY,
		)

	case 1:
		serial := msg.ReadUint()
		surface := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Leave(
			serial,
			surface,
		)

	case 2:
		time := msg.ReadUint()
		surfaceX := msg.ReadFixed()
		surfaceY := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Motion(
			time,
			surfaceX,
			surfaceY,
		)

	case 3:
		serial := msg.ReadUint()
		time := msg.ReadUint()
		button := msg.ReadUint()
		state := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Button(
			serial,
			time,
			button,
			state,
		)

	case 4:
		time := msg.ReadUint()
		axis := msg.ReadUint()
		value := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Axis(
			time,
			axis,
			value,
		)

	case 5:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Frame()

	case 6:
		axisSource := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.AxisSource(
			axisSource,
		)

	case 7:
		time := msg.ReadUint()
		axis := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.AxisStop(
			time,
			axis,
		)

	case 8:
		axis := msg.ReadUint()
		discrete := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.AxisDiscrete(
			axis,
			discrete,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_pointer",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj pointerObject) SetCursor(sender uint32, serial uint32, surface uint32, hotspotX int32, hotspotY int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	builder.WriteUint(serial)
	builder.WriteUint(surface)
	builder.WriteInt(hotspotX)
	builder.WriteInt(hotspotY)

	return &builder
}

func (obj pointerObject) Release(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	return &builder
}

type pointerError int32

const (
	pointerErrorRole pointerError = 0
)

type pointerButtonState int32

const (
	pointerButtonStateReleased pointerButtonState = 0
	pointerButtonStatePressed  pointerButtonState = 1
)

type pointerAxis int32

const (
	pointerAxisVerticalScroll   pointerAxis = 0
	pointerAxisHorizontalScroll pointerAxis = 1
)

type pointerAxisSource int32

const (
	pointerAxisSourceWheel      pointerAxisSource = 0
	pointerAxisSourceFinger     pointerAxisSource = 1
	pointerAxisSourceContinuous pointerAxisSource = 2
	pointerAxisSourceWheelTilt  pointerAxisSource = 3
)

type keyboardObject struct {
	listener interface {
		Keymap(format uint32, fd *os.File, size uint32)
		Enter(serial uint32, surface uint32, keys []byte)
		Leave(serial uint32, surface uint32)
		Key(serial uint32, time uint32, key uint32, state uint32)
		Modifiers(serial uint32, modsDepressed uint32, modsLatched uint32, modsLocked uint32, group uint32)
		RepeatInfo(rate int32, delay int32)
	}
}

func (obj keyboardObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		format := msg.ReadUint()
		fd := msg.ReadFile()
		size := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Keymap(
			format,
			fd,
			size,
		)

	case 1:
		serial := msg.ReadUint()
		surface := msg.ReadUint()
		keys := msg.ReadArray()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Enter(
			serial,
			surface,
			keys,
		)

	case 2:
		serial := msg.ReadUint()
		surface := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Leave(
			serial,
			surface,
		)

	case 3:
		serial := msg.ReadUint()
		time := msg.ReadUint()
		key := msg.ReadUint()
		state := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Key(
			serial,
			time,
			key,
			state,
		)

	case 4:
		serial := msg.ReadUint()
		modsDepressed := msg.ReadUint()
		modsLatched := msg.ReadUint()
		modsLocked := msg.ReadUint()
		group := msg.ReadUint()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Modifiers(
			serial,
			modsDepressed,
			modsLatched,
			modsLocked,
			group,
		)

	case 5:
		rate := msg.ReadInt()
		delay := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.RepeatInfo(
			rate,
			delay,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_keyboard",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj keyboardObject) Release(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

type keyboardKeymapFormat int32

const (
	keyboardKeymapFormatNoKeymap keyboardKeymapFormat = 0
	keyboardKeymapFormatXkbV1    keyboardKeymapFormat = 1
)

type keyboardKeyState int32

const (
	keyboardKeyStateReleased keyboardKeyState = 0
	keyboardKeyStatePressed  keyboardKeyState = 1
)

type touchObject struct {
	listener interface {
		Down(serial uint32, time uint32, surface uint32, id int32, x wire.Fixed, y wire.Fixed)
		Up(serial uint32, time uint32, id int32)
		Motion(time uint32, id int32, x wire.Fixed, y wire.Fixed)
		Frame()
		Cancel()
		Shape(id int32, major wire.Fixed, minor wire.Fixed)
		Orientation(id int32, orientation wire.Fixed)
	}
}

func (obj touchObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		serial := msg.ReadUint()
		time := msg.ReadUint()
		surface := msg.ReadUint()
		id := msg.ReadInt()
		x := msg.ReadFixed()
		y := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Down(
			serial,
			time,
			surface,
			id,
			x,
			y,
		)

	case 1:
		serial := msg.ReadUint()
		time := msg.ReadUint()
		id := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Up(
			serial,
			time,
			id,
		)

	case 2:
		time := msg.ReadUint()
		id := msg.ReadInt()
		x := msg.ReadFixed()
		y := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Motion(
			time,
			id,
			x,
			y,
		)

	case 3:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Frame()

	case 4:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Cancel()

	case 5:
		id := msg.ReadInt()
		major := msg.ReadFixed()
		minor := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Shape(
			id,
			major,
			minor,
		)

	case 6:
		id := msg.ReadInt()
		orientation := msg.ReadFixed()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Orientation(
			id,
			orientation,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_touch",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj touchObject) Release(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

type outputObject struct {
	listener interface {
		Geometry(x int32, y int32, physicalWidth int32, physicalHeight int32, subpixel int32, make string, model string, transform int32)
		Mode(flags uint32, width int32, height int32, refresh int32)
		Done()
		Scale(factor int32)
	}
}

func (obj outputObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	case 0:
		x := msg.ReadInt()
		y := msg.ReadInt()
		physicalWidth := msg.ReadInt()
		physicalHeight := msg.ReadInt()
		subpixel := msg.ReadInt()
		make := msg.ReadString()
		model := msg.ReadString()
		transform := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Geometry(
			x,
			y,
			physicalWidth,
			physicalHeight,
			subpixel,
			make,
			model,
			transform,
		)

	case 1:
		flags := msg.ReadUint()
		width := msg.ReadInt()
		height := msg.ReadInt()
		refresh := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Mode(
			flags,
			width,
			height,
			refresh,
		)

	case 2:
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Done()

	case 3:
		factor := msg.ReadInt()
		if err := msg.Err(); err != nil {
			return err
		}
		obj.listener.Scale(
			factor,
		)
	}

	return wire.UnknownOpError{
		Interface: "wl_output",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj outputObject) Release(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

type outputSubpixel int32

const (
	outputSubpixelUnknown       outputSubpixel = 0
	outputSubpixelNone          outputSubpixel = 1
	outputSubpixelHorizontalRgb outputSubpixel = 2
	outputSubpixelHorizontalBgr outputSubpixel = 3
	outputSubpixelVerticalRgb   outputSubpixel = 4
	outputSubpixelVerticalBgr   outputSubpixel = 5
)

type outputTransform int32

const (
	outputTransformNormal     outputTransform = 0
	outputTransform90         outputTransform = 1
	outputTransform180        outputTransform = 2
	outputTransform270        outputTransform = 3
	outputTransformFlipped    outputTransform = 4
	outputTransformFlipped90  outputTransform = 5
	outputTransformFlipped180 outputTransform = 6
	outputTransformFlipped270 outputTransform = 7
)

type outputMode int32

const (
	outputModeCurrent   outputMode = 1
	outputModePreferred outputMode = 2
)

type regionObject struct {
	listener interface {
	}
}

func (obj regionObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_region",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj regionObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

func (obj regionObject) Add(sender uint32, x int32, y int32, width int32, height int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteInt(x)
	builder.WriteInt(y)
	builder.WriteInt(width)
	builder.WriteInt(height)

	return &builder
}

func (obj regionObject) Subtract(sender uint32, x int32, y int32, width int32, height int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteInt(x)
	builder.WriteInt(y)
	builder.WriteInt(width)
	builder.WriteInt(height)

	return &builder
}

type subcompositorObject struct {
	listener interface {
	}
}

func (obj subcompositorObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_subcompositor",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj subcompositorObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

func (obj subcompositorObject) GetSubsurface(sender uint32, id uint32, surface uint32, parent uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteUint(id)
	builder.WriteUint(surface)
	builder.WriteUint(parent)

	return &builder
}

type subcompositorError int32

const (
	subcompositorErrorBadSurface subcompositorError = 0
)

type subsurfaceObject struct {
	listener interface {
	}
}

func (obj subsurfaceObject) Dispatch(msg *wire.MessageBuffer) error {
	switch msg.Op() {
	}

	return wire.UnknownOpError{
		Interface: "wl_subsurface",
		Type:      "event",
		Op:        msg.Op(),
	}
}

func (obj subsurfaceObject) Destroy(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     0,
	}

	return &builder
}

func (obj subsurfaceObject) SetPosition(sender uint32, x int32, y int32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     1,
	}

	builder.WriteInt(x)
	builder.WriteInt(y)

	return &builder
}

func (obj subsurfaceObject) PlaceAbove(sender uint32, sibling uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     2,
	}

	builder.WriteUint(sibling)

	return &builder
}

func (obj subsurfaceObject) PlaceBelow(sender uint32, sibling uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     3,
	}

	builder.WriteUint(sibling)

	return &builder
}

func (obj subsurfaceObject) SetSync(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     4,
	}

	return &builder
}

func (obj subsurfaceObject) SetDesync(sender uint32) *wire.MessageBuilder {
	builder := wire.MessageBuilder{
		Sender: sender,
		Op:     5,
	}

	return &builder
}

type subsurfaceError int32

const (
	subsurfaceErrorBadSurface subsurfaceError = 0
)
